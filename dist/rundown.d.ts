import { ElementId, ExternalElement, ExternalElementId, InternalElement, InternalElementId, InternalElementIdWithCreator, VElement, VRundown, VTemplate } from './v-connection';
import { CommandResult } from './msehttp';
import { PepResponse } from './peptalk';
import { MSERep } from './mse';
export declare class Rundown implements VRundown {
    readonly playlist: string;
    readonly profile: string;
    readonly description: string;
    private readonly mse;
    private get pep();
    private msehttp;
    private channelMap;
    private initialChannelMapPromise;
    constructor(mseRep: MSERep, profile: string, playlist: string, description: string);
    private static makeKey;
    private buildChannelMap;
    private ref;
    listTemplates(showId: string): Promise<string[]>;
    getTemplate(templateName: string, showId: string): Promise<VTemplate>;
    createElement(elementId: InternalElementId, templateName: string, textFields: string[], channel?: string): Promise<InternalElement>;
    createElement(elementId: ExternalElementId): Promise<ExternalElement>;
    private assertInternalElementDoesNotExist;
    private createInternalElement;
    private hasModel;
    private assertExternalElementDoesNotExist;
    private checkChannelMapWasBuilt;
    private createExternalElement;
    listInternalElements(showId: string): Promise<InternalElementIdWithCreator[]>;
    listExternalElements(): Promise<Array<ExternalElementId>>;
    initializeShow(showId: string): Promise<CommandResult>;
    cleanupShow(showId: string): Promise<CommandResult>;
    cleanupAllSofieShows(): Promise<CommandResult[]>;
    private findAllSofieShowIds;
    private isSofieShow;
    private reduceSettledResultToShowIds;
    private stripCurlyBrackets;
    activate(twice?: boolean, initPlaylist?: boolean): Promise<CommandResult>;
    deactivate(): Promise<CommandResult>;
    deleteElement(elementId: ElementId): Promise<PepResponse>;
    cue(elementId: ElementId): Promise<CommandResult>;
    take(elementId: ElementId): Promise<CommandResult>;
    continue(elementId: ElementId): Promise<CommandResult>;
    continueReverse(elementId: ElementId): Promise<CommandResult>;
    out(elementId: ElementId): Promise<CommandResult>;
    initialize(elementId: ExternalElementId): Promise<CommandResult>;
    purgeInternalElements(showIds: string[], onlyCreatedByUs?: boolean, elementsToKeep?: InternalElementId[]): Promise<PepResponse>;
    purgeExternalElements(elementsToKeep?: ExternalElementId[]): Promise<PepResponse>;
    getElement(elementId: ElementId): Promise<VElement>;
    isActive(): Promise<boolean>;
    private getExternalElementPath;
    setAlternativeConcept(value: string): Promise<void>;
}
//# sourceMappingURL=rundown.d.ts.map